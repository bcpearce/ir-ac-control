import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import React, {useState, useEffect} from 'react'

import LoginBug from '../components/login_bug.tsx'
import { AcBugContainer } from '../components/ac_bug.tsx'
import { EnvironmentalBugContainer } from '../components/environmental_bug.tsx'

import { moment } from 'moment';

import * as mqtt from 'mqtt'

const inter = Inter({ subsets: ['latin'] })

export default function Home() {

  const [client, setClient] = React.useState(null);

  const [connectionStatus, setConnectionStatus] = useState(false);
  const [connectionError, setConnectionError] = useState({} as Error);
  const [connectionBroker, setConnectionBroker] = useState("");
  const [temperatureDegC, setTemperatureDegC] = useState({});
  const [humidityPct, setHumidityPct] = useState({});
  const [batteryCellPct, setBatteryCellPct] = useState({});
  const [batteryVoltage, setBatteryVoltage] = useState({});
  const [batteryChargeRate, setBatteryChargeRate] = useState({});
  const [zoneNames, setZoneNames] = useState({});
  const [acAdvert, setAcAdvert] = useState({});

  function ConnectClient(url, options) {
    console.log("Connecting to", url);
    setClient(mqtt.connect(url, options));
    setConnectionBroker(url);
  };

  useEffect(() => {
    if (client) {
      console.log(client);

      client.on('connect', () => {
        console.log("We're In.");
        setConnectionStatus(true);
        setConnectionError({});

        const topics = [
          '$SYS/broker/clients/connected',
          'zone/+/name', 
          'zone/+/environment/#', 
          'zone/+/battery/#',
          'zone/+/ac/advert'
          ];

        topics.forEach((topic) => {
          console.log("Subscribed to", topic);
          client.subscribe(topic);
        });
      });

      client.on('error', (err) => {
        console.log("Help I've fallen and I can't get up.", err);
        DisconnectClient();
        setConnectionError(err);
      });

      client.on('message', (topic, message) => {
        OnMessageReceived(topic, message);
      })
    }}, [client]);

  function OnMessageReceived(topic, message) {
    console.log("Got message about ", topic, message);
    const tl = topic.split("/");
    const value = new TextDecoder().decode(message);
    if (tl[0] === 'zone') {
      let zone = tl[1];
      if (tl[2] === 'name') {
        const _name = value.trim();
        setZoneNames(zoneNames => 
          ({...zoneNames, [zone]:_name}));
      }
      if (tl[2] === 'battery') {
        if (tl[3] === 'cellPct') {
          setBatteryCellPct(batteryCellPct => 
            ({...batteryCellPct, [zone]:parseFloat(value)}));
        }
        else if (tl[3] === 'voltage') {
          setBatteryVoltage(batteryVoltage => 
            ({...batteryVoltage, [zone]:parseFloat(value)}));
        }
        else if (tl[3] === 'chargeRate') {
          setBatteryChargeRate(batteryChargeRate => 
            ({...batteryChargeRate, [zone]:parseFloat(value)}));
        }
      }
      if (tl[2] === 'environment') {
        if (tl[3] === 'humidityPct') {
          setHumidityPct(humidityPct => 
            ({...humidityPct, [zone]:parseFloat(value)}));
        }
        if (tl[3] === 'temperatureDegC') {
          setTemperatureDegC(temperatureDegC => 
            ({...temperatureDegC, [zone]:parseFloat(value)}));
        }
      }
      if (tl[2] == 'ac') {
        if (tl[3] == 'advert') {
          setAcAdvert(acAdvert =>
            ({...acAdvert, [zone]:parseInt(value)}));
        }
      }
    }
  }

  function DisconnectClient() {
    client.end();
    setConnectionStatus(false);
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.description}>
          <LoginBug 
            handleConnect={ConnectClient} 
            handleDisconnect={DisconnectClient}
            connectionStatus={connectionStatus}
            connectionError={connectionError}
            connectionBroker={connectionBroker}/>
        </div>
        <div className={styles.description}><h1>AC Remotes</h1></div>
        <AcBugContainer 
          acAdvert={acAdvert} 
          zoneNames={zoneNames}
          client={client}
          />
        <div className={styles.description}><h1>Environments</h1></div>
        <EnvironmentalBugContainer 
          zoneNames={zoneNames}
          humidityPct={humidityPct}
          temperatureDegC={temperatureDegC}
          batteryCellPct={batteryCellPct}
          batteryVoltage={batteryVoltage}
          batteryChargeRate={batteryChargeRate} />
      </main>
    </>
  )
}
